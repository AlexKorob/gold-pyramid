{"version":3,"sources":["components/Cell/styles.js","components/Cell/index.jsx","components/Piramid/styles.js","components/counter/styles.js","components/counter/index.jsx","components/spinner/index.jsx","components/Piramid/calcBestWay.webworker.js","components/Piramid/index.jsx","pages/main/styles.js","pages/main/index.jsx","App.js","serviceWorker.js","index.js"],"names":["StyledCell","styled","div","props","showValue","backgroundColor","isClickable","css","Cell","cellData","handleClick","id","indexPos1","indexPos2","onClick","value","require","default","StyledPiramid","ButtonWrapper","StyledCounter","Counter","leftOffset","useStyles","makeStyles","spinnerWrapper","marginTop","textAlign","spinner","color","animationDuration","margin","Spinner","classes","className","CircularProgress","variant","disableShrink","size","thickness","blob","Blob","rows","arr","this","allWays","getAllWays","reduce","prev","current","prevPos","steps","length","slice","concat","push","map","row","getBestWay","toString","type","url","URL","createObjectURL","Piramid","countRows","findBestWayWorker","Worker","BestWayWorker","React","useState","savedRows","setSavedRows","isPiramidCompleted","setIsPiramidCompleted","isBestWayShowing","setIsBestWayShowing","setRows","savedScore","setSavedScore","score","setScore","isLoading","setIsLoading","getCellBackgroundColor","avalilableColors","Math","floor","random","useEffect","i","j","ceil","handleCellClick","cell","prevState","Object","defineProperty","currentIndex","onmessage","$event","data","path","rowIndex","cellIndex","parseInt","index","key","Button","postMessage","disabled","InputWrapper","MainPage","setCountRows","errors","setErrors","TextField","error","label","onChange","e","target","Number","isNaN","helperText","join","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.f05922e3.chunk.js","sourcesContent":["import styled, { css } from \"styled-components\";\n\nexport const StyledCell = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 0.5px;\n  cursor: default;\n  color: ${(props) => (props.showValue ? \"white\" : \"#333\")};\n  background-color: ${(props) => props.backgroundColor || \"darkgray\"};\n  border: 2px solid black;\n  min-width: 25px;\n  min-height: 25px;\n  ${(props) =>\n    props.isClickable &&\n    css`\n      :hover {\n        cursor: pointer;\n        outline: 3px solid darkred;\n        border: 2px solid darkred;\n      }\n    `}\n`;\n","import React from \"react\";\nimport { StyledCell } from \"./styles\";\n\nconst Cell = ({ cellData, handleClick }) => {\n  return (\n    <StyledCell\n      id={`${cellData.indexPos1}-${cellData.indexPos2}`}\n      onClick={() => handleClick(cellData.indexPos1, cellData.indexPos2)}\n      backgroundColor={cellData.showValue && cellData.backgroundColor}\n      isClickable={cellData.isClickable}\n      showValue={cellData.showValue}\n    >\n      {cellData.value}\n    </StyledCell>\n  );\n};\n\nexport default Cell;\n","const { default: styled } = require(\"styled-components\");\n\nexport const StyledPiramid = styled.div`\n  display: flex;\n  margin-top: 20px;\n  flex-direction: column;\n  justify-content: center;\n  & > .row {\n    display: flex;\n    justify-content: center;\n  }\n`;\n\nexport const ButtonWrapper = styled.div`\n  margin-top: 2rem;\n  text-align: center;\n`;\n","import styled from \"styled-components\";\n\nexport const StyledCounter = styled.div`\n  color: darkred;\n  font-size: 24px;\n  position: fixed;\n  background-color: white;\n  z-index: 1;\n  top: 1rem;\n  left: 1rem;\n`;\n","import React from \"react\";\nimport { StyledCounter } from \"./styles\";\n\nconst Counter = ({ value }) => {\n  return <StyledCounter leftOffset>{value}</StyledCounter>;\n};\n\nexport default Counter;\n","import React from \"react\";\nimport { CircularProgress } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n  spinnerWrapper: {\n    marginTop: \"2rem\",\n    textAlign: \"center\",\n  },\n  spinner: {\n    color: \"#1a90ff\",\n    animationDuration: \"550ms\",\n    margin: \"0 auto\",\n  },\n});\n\nconst Spinner = () => {\n  const classes = useStyles();\n  return (\n    <div className={classes.spinnerWrapper}>\n      <CircularProgress\n        variant=\"indeterminate\"\n        disableShrink\n        className={classes.spinner}\n        size={40}\n        value={100}\n        thickness={4}\n      />\n    </div>\n  );\n};\n\nexport default Spinner;\n","const findBestWay = ({ rows }) => {\n  class BestWay {\n    constructor(arr) {\n      this.arr = arr;\n      this.allWays = [];\n    }\n    getBestWay() {\n      this.getAllWays(this.arr);\n      return this.allWays.reduce((prev, current) =>\n        prev[0] > current[0] ? prev : current\n      );\n    }\n    getAllWays(arr, prevPos = null, prev = null, steps = []) {\n      if (prev === null && prevPos === null) {\n        this.getAllWays(\n          arr.slice(1),\n          (prevPos = 0),\n          (prev = arr[0][0]),\n          (steps = [0])\n        );\n        return;\n      }\n      if (arr.length === 0) {\n        this.allWays.push([prev, steps]);\n        return;\n      }\n      this.getAllWays(\n        arr.slice(1),\n        prevPos,\n        (prev = arr[0][prevPos] + prev),\n        (steps = steps.concat(prevPos))\n      );\n      this.getAllWays(\n        arr.slice(1),\n        (prevPos = prevPos + 1),\n        (prev = arr[0][prevPos] - arr[0][prevPos - 1] + prev),\n        (steps = steps.slice(0, steps.length - 1).concat(prevPos))\n      );\n    }\n  }\n\n  const bestWay = new BestWay(rows.map((row) => row.map((row) => row.value)));\n  return bestWay.getBestWay();\n};\n\nconst blob = new Blob(\n  [\n    `self.func = ${findBestWay.toString()};`,\n    \"self.onmessage = (e) => {\",\n    \"  const result = self.func(e.data);\",\n    \"  self.postMessage(result);\",\n    \"};\",\n  ],\n  { type: \"text/javascript\" }\n);\nconst url = URL.createObjectURL(blob);\n\nexport default url;\n","import React from \"react\";\nimport Cell from \"components/Cell\";\nimport \"./styles.js\";\nimport Counter from \"components/counter\";\nimport { StyledPiramid, ButtonWrapper } from \"./styles.js\";\nimport { Button } from \"@material-ui/core\";\nimport Spinner from \"components/spinner/index.jsx\";\nimport BestWayWorker from \"./calcBestWay.webworker\";\n\nconst Piramid = ({ countRows }) => {\n  const findBestWayWorker = new Worker(BestWayWorker);\n  const [savedRows, setSavedRows] = React.useState([]);\n  const [isPiramidCompleted, setIsPiramidCompleted] = React.useState(false);\n  const [isBestWayShowing, setIsBestWayShowing] = React.useState(false);\n  const [rows, setRows] = React.useState([]);\n  const [savedScore, setSavedScore] = React.useState(0);\n  const [score, setScore] = React.useState(0);\n  const [isLoading, setIsLoading] = React.useState(false);\n\n  const getCellBackgroundColor = () => {\n    const avalilableColors = [\n      \"green\",\n      \"brown\",\n      \"blue\",\n      \"crimson\",\n      \"coral\",\n      \"forestgreen\",\n      \"goldenrod\",\n      \"darkgreen\",\n      \"darkseagreen\",\n    ];\n\n    return avalilableColors[\n      Math.floor(Math.random() * avalilableColors.length)\n    ];\n  };\n\n  const getRandomValue = () => {\n    return Math.ceil(Math.random() * 99);\n  };\n\n  React.useEffect(() => {\n    setSavedRows([]);\n    setIsBestWayShowing(false);\n    const rows = [];\n    for (let i = 0; i < countRows; i++) {\n      const row = [];\n      for (let j = 0; j < i + 1; j++) {\n        row.push({\n          indexPos1: i,\n          indexPos2: j,\n          value: getRandomValue(),\n          showValue: false,\n          isClickable: false,\n          backgroundColor: getCellBackgroundColor(),\n        });\n      }\n      rows.push(row);\n    }\n    rows[0][0] = { ...rows[0][0], showValue: true };\n    rows[1][0] = { ...rows[1][0], isClickable: true };\n    rows[1][1] = { ...rows[1][1], isClickable: true };\n    setScore(rows[0][0].value);\n    setRows(rows);\n  }, [countRows]);\n\n  const handleCellClick = (i, j) => {\n    let cell = rows[i][j];\n    if (!cell.isClickable) return null;\n    setRows((prevState) => {\n      prevState[i] = prevState[i].map((row) =>\n        cell === row\n          ? { ...row, showValue: true, isClickable: false }\n          : Object.defineProperty(row, \"isClickable\", { value: false })\n      );\n      if (i !== countRows - 1) {\n        prevState[i + 1] = prevState[i + 1].map((row, currentIndex) =>\n          currentIndex === j || currentIndex === j + 1\n            ? Object.defineProperty(row, \"isClickable\", { value: true })\n            : row\n        );\n      } else {\n        setIsPiramidCompleted(true);\n      }\n      return [...prevState];\n    });\n    setScore((prevState) => prevState + cell.value);\n  };\n\n  React.useEffect(() => {\n    findBestWayWorker.onmessage = ($event) => {\n      if ($event && $event.data) {\n        const [score, path] = $event.data;\n        setRows((prevState) => {\n          return prevState.map((row, rowIndex) =>\n            row.map((cell, cellIndex) => {\n              return cellIndex === parseInt(path[rowIndex])\n                ? { ...cell, showValue: true }\n                : { ...cell, showValue: false };\n            })\n          );\n        });\n        setIsLoading(false);\n        setScore(score);\n        setIsBestWayShowing(true);\n      }\n    };\n  }, [findBestWayWorker]);\n\n  const handleShowBestWay = () => {\n    if (isBestWayShowing) {\n      setRows(savedRows);\n      setSavedRows([]);\n      setScore(savedScore);\n      setIsBestWayShowing(false);\n      return;\n    }\n    setSavedRows(rows);\n    setSavedScore(score);\n    setIsLoading(true);\n\n    findBestWayWorker.postMessage({ rows });\n  };\n\n  return isLoading ? (\n    <Spinner />\n  ) : (\n    <>\n      <Counter value={score} />\n      <StyledPiramid>\n        {rows.map((row, index) => (\n          <div className=\"row\" key={index}>\n            {row.map((cellData, index) => (\n              <Cell\n                cellData={cellData}\n                handleClick={handleCellClick}\n                key={index}\n              />\n            ))}\n          </div>\n        ))}\n      </StyledPiramid>\n      <ButtonWrapper>\n        <Button\n          onClick={handleShowBestWay}\n          disabled={!isPiramidCompleted}\n          color=\"primary\"\n          variant=\"contained\"\n        >\n          {isBestWayShowing ? \"Hide\" : \"Show\"} best way\n        </Button>\n      </ButtonWrapper>\n    </>\n  );\n};\n\nexport default Piramid;\n","const { default: styled } = require(\"styled-components\");\n\nexport const InputWrapper = styled.div`\n  margin-top: 20px;\n  text-align: center;\n`;\n","import React from \"react\";\nimport Piramid from \"components/Piramid\";\nimport { InputWrapper } from \"./styles\";\nimport { TextField } from \"@material-ui/core\";\n\nconst MainPage = () => {\n  const [countRows, setCountRows] = React.useState();\n  const [errors, setErrors] = React.useState([]);\n\n  const handleInput = (e) => {\n    const value = parseInt(e.target.value);\n    if (e.target.value.length === 0) {\n      setCountRows(\"\");\n      return;\n    }\n    if (e.target.value.length > 1 && Number.isNaN(value)) {\n      setErrors([\"This is not number\"]);\n      return;\n    }\n    if (value > 22) {\n      setErrors([\"Value must be grade then 1 and less then 23\"]);\n      return;\n    }\n    setErrors([]);\n    setCountRows(value);\n  };\n\n  return (\n    <>\n      <InputWrapper>\n        <TextField\n          error={errors.length > 0 ? true : false}\n          label=\"enter count rows of pyramid\"\n          onChange={handleInput}\n          value={countRows || \"\"}\n          helperText={errors.join(<hr />)}\n          variant=\"outlined\"\n        />\n      </InputWrapper>\n      {countRows > 1 && <Piramid countRows={countRows} />}\n    </>\n  );\n};\n\nexport default MainPage;\n","import React from \"react\";\nimport MainPage from \"pages/main\";\n\nfunction App() {\n  return <MainPage />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}